// Mocks generated by Mockito 5.4.6 from annotations
// in state_picker_temp/test/features/location_picker/domain/usecases/get_countries_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_picker_temp/core/errors/failures.dart' as _i5;
import 'package:state_picker_temp/features/location_picker/domain/entities/country.dart'
    as _i6;
import 'package:state_picker_temp/features/location_picker/domain/entities/state.dart'
    as _i7;
import 'package:state_picker_temp/features/location_picker/domain/repositories/location_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationRepository extends _i1.Mock
    implements _i3.LocationRepository {
  MockLocationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CountryEntity>>> getCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getCountries, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.CountryEntity>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.CountryEntity>>(
                    this,
                    Invocation.method(#getCountries, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CountryEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.StateEntity>>> getStates(
    String? countryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getStates, [countryId]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i7.StateEntity>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i7.StateEntity>>(
                    this,
                    Invocation.method(#getStates, [countryId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i7.StateEntity>>>);

  @override
  List<_i7.StateEntity>? getCachedStates(String? countryId) =>
      (super.noSuchMethod(Invocation.method(#getCachedStates, [countryId]))
          as List<_i7.StateEntity>?);
}
